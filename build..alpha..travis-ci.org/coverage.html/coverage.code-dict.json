{"/home/travis/build/npmtest/node-npmtest-ember-insights/test.js":"/* istanbul instrument in package npmtest_ember_insights */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-insights/lib.npmtest_ember_insights.js":"/* istanbul instrument in package npmtest_ember_insights */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_insights = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_insights = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-insights/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-insights && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_insights */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_insights\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_insights.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_ember_insights.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_insights.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_ember_insights.__dirname +\n                    '/lib.npmtest_ember_insights.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-insights'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/addon/handler.js":"import InsightsHandler from './handlers/insights';\nimport TimingHandler   from './handlers/timing';\n\nexport default {\n  factory: (settings) => {\n    let insightsHandler = InsightsHandler.factory(settings);\n    return (type, data, tracker) => {\n      insightsHandler(type, data, tracker);\n    };\n  },\n  proxy: (dispatch, settings) => {\n    let timing = new TimingHandler(settings);\n    return (type, data, tracker) => {\n      dispatch(type, data, tracker);\n      timing.handle(type, data, tracker);\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/addon/matcher.js":"/* global Ember */\n\nfunction groupMatches(group, routeName, eventType, eventValueToMatch) {\n  let routeNameNoIndex = routeName.replace('.index', '');\n\n  let allKey = 'ALL_' + eventType.toUpperCase() + 'S';\n  let all = group.insights.getWithDefault(allKey, false);\n\n  if ( checkInAll(all, eventType, eventValueToMatch, routeNameNoIndex) ) {\n    return allKey;\n  }\n\n  let toMatch = getSearchingPaths(eventType, routeName, routeNameNoIndex, eventValueToMatch);\n\n  for (var i = 0, len = toMatch.length; i < len; i++) {\n    var path   = toMatch[i][0];\n    var entity = toMatch[i][1];\n    if (group.insights.getWithDefault(path, []).indexOf(entity) > -1) {\n      return path;\n    }\n  }\n\n  return false;\n}\n\nfunction getSearchingPaths(eventType, routeName, routeNameNoIndex, eventValueToMatch) {\n  switch (eventType) {\n    case 'transition':\n      return [\n        ['TRANSITIONS', routeName       ],\n        ['TRANSITIONS', routeNameNoIndex],\n        ['MAP.' + routeName        + '.ACTIONS', 'TRANSITION'],\n        ['MAP.' + routeNameNoIndex + '.ACTIONS', 'TRANSITION']\n      ];\n    case 'action':\n      return [\n        ['ACTIONS', eventValueToMatch],\n        ['MAP.' + routeName        + '.ACTIONS', eventValueToMatch],\n        ['MAP.' + routeNameNoIndex + '.ACTIONS', eventValueToMatch]\n      ];\n  }\n}\n\nfunction getMatchedGroups(groups, routeName, eventType, eventValueToMatch) {\n  var result = [];\n  for (var i = 0, len = groups.length; i < len; i++) {\n    var group = groups[i];\n    var keys  = groupMatches(group, routeName, eventType, eventValueToMatch);\n    pushToResult(keys, group, result);\n  }\n  return result;\n}\n\nfunction pushToResult(keyMatched, group, holder) {\n  if (keyMatched) {\n    holder.push({ group: group, keyMatched: keyMatched });\n  }\n}\n\nfunction checkInAll(matchAllConfig, eventType, eventValueToMatch, routeNameNoIndex) {\n  if (matchAllConfig === true) {\n    return true;\n  }\n  else if (typeof matchAllConfig === 'object' && matchAllConfig.except) {\n    var listOfExcepted = matchAllConfig.except;\n    var valuesToMatch = [ eventValueToMatch ];\n    if (eventType === 'transition' && routeNameNoIndex !== eventValueToMatch) {\n      valuesToMatch.push(routeNameNoIndex);\n    }\n\n    if (Ember.EnumerableUtils.intersection(valuesToMatch, listOfExcepted).length === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction processMatchedGroups(matchedGroups, addonSettings, eventType, eventParams){\n    for (var i = 0, len = matchedGroups.length; i < len; i++) {\n      var matchedGroup = matchedGroups[i].group;\n\n      if (eventType === 'transition' && addonSettings.updateDocumentLocationOnTransitions) {\n        matchedGroup.tracker.set('location', document.URL);\n      }\n      // dispatches mapped action\n      matchedGroup.dispatch(eventType, eventParams, matchedGroup.tracker);\n    }\n}\n\nexport {\n  getMatchedGroups,\n  processMatchedGroups,\n  pushToResult,\n  getSearchingPaths,\n  checkInAll\n};\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/addon/middleware.js":"/* global Ember */\nimport { getMatchedGroups, processMatchedGroups } from './matcher';\n\nexport default {\n  use: (addon) => {\n    function _handle(type, data) {\n      let eventName, valueToMatch;\n\n      switch (type) {\n        case 'transition':\n          eventName     = type;\n          valueToMatch  = data.routeName;\n          break;\n        case 'action':\n          eventName     = data.actionName;\n          valueToMatch  = data.actionName;\n          break;\n      }\n\n      let matchedGroups = getMatchedGroups(addon.settings.mappings, data.routeName, type, valueToMatch);\n\n      // drop a line to the Ember.debug\n      if (addon.settings.debug) {\n        let isMapped = (matchedGroups.length ? ' SEND' : ' TRAP');\n        let template = { prompt: \"Ember-Insights%@: '%@'\", p1: \" from '%@':'%@'\", p2: \" %@ '%@':'%@'\" };\n        let msg = Ember.String.fmt(template.prompt, isMapped, eventName);\n        if (data.prevRouteName) { msg += Ember.String.fmt(template.p1, data.prevRouteName, data.prevUrl); }\n        let prep = (type === 'action') ? 'action from' : 'to';\n        if (data.routeName)    { msg += Ember.String.fmt(template.p2, prep, data.routeName, data.url); }\n\n        Ember.debug(msg);\n      }\n\n      processMatchedGroups(matchedGroups, addon.settings, type, data);\n    }\n\n    // middleware for actions\n    function actionMiddleware(actionName, ...actionArguments) {\n      // use original implementation if addon is not activated\n      if (!addon.isActivated) { this._super(...arguments); return; }\n\n      let appController   = this.container.lookup('controller:application');\n      let routeName       = appController.get('currentRouteName');\n      let route           = this.container.lookup('route:' + routeName);\n      let url             = this.container.lookup('router:main').get('url');\n\n      Ember.run.schedule('afterRender', this, () => {\n        _handle('action', {\n          actionName:       actionName,\n          actionArguments:  actionArguments,\n          route:            route,\n          routeName:        routeName,\n          url:              url\n        });\n      });\n\n      this._super(...arguments);\n    }\n\n    // middleware for transitions\n    function transitionMiddleware() {\n      // use original implementation if addon is not activated\n      if (!addon.isActivated) { this._super(...arguments); return; }\n\n      let appController  = this.container.lookup('controller:application');\n      let prevRouteName  = appController.get('currentRouteName');\n      let prevUrl        = (prevRouteName ? this.get('url') : '');\n      let newRouteName   = arguments[0][arguments[0].length-1].name;\n\n      Ember.run.schedule('afterRender', this, () => {\n        _handle('transition', {\n          route:         this.container.lookup('route:' + newRouteName),\n          routeName:     newRouteName,\n          prevRouteName: prevRouteName,\n          url:           (this.get('url') || '/'),\n          prevUrl:       prevUrl\n        });\n      });\n\n      this._super(...arguments);\n    }\n\n    // start catching actions\n    Ember.ActionHandler.reopen({\n      send: actionMiddleware\n    });\n    // start catching transitions\n    Ember.Router.reopen({\n      didTransition: transitionMiddleware\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/addon/optparse.js":"/* global Ember */\nimport DefaultTracker from './trackers/console';\nimport DefaultHandler from './handler';\n\nexport default {\n  defaultConfigureOpts: function(opts) {\n    opts[0] = (opts[0] || 'default');\n    if (typeof opts[0] === 'string') {\n      opts[1] = (opts[1] || {});\n    } else if(typeof opts[0] === 'object' && this.hasConfigureOpts(opts[0])) {\n      opts[1] = opts[0];\n      opts[0] = 'default';\n    }\n    return opts;\n  },\n\n  configureOpts: ['debug', 'trackerFactory', 'trackTransitionsAs', 'updateDocumentLocationOnTransitions'],\n\n  hasConfigureOpts: function(opts) {\n    let result = Ember.A(this.configureOpts).find( (e) => e in opts );\n    return result;\n  },\n\n  defaultInsightsMapping: { insights: { ALL_TRANSITIONS: true, ALL_ACTIONS: true } },\n  defaultTimingSettings:   { timing: { transitions: false } },\n\n  defaultTrackOpts: function(opts = this.defaultInsightsMapping) {\n    _assertInsightsMapping(opts);\n    _assertTimingSettings(opts, this.defaultTimingSettings);\n    return opts;\n  },\n\n  trackerOpts: function(opts) {\n    return this.mergeTrackerOpts(opts, opts);\n  },\n\n  mergeTrackerOpts: function(opts, basicOpts) {\n    let assert;\n\n    opts.debug = (opts.debug === undefined ? true : opts.debug);\n\n    opts.trackerFactory = (opts.trackerFactory || basicOpts.trackerFactory || DefaultTracker.factory);\n    assert = (typeof opts.trackerFactory === 'function');\n    Ember.assert(\"'trackerFactory' should be a function\", assert);\n\n    opts.tracker = opts.trackerFactory(opts);\n    assert = (typeof opts.tracker === 'object');\n    Ember.assert(\"Can't build tracker\", assert);\n\n    opts.trackTransitionsAs = (opts.trackTransitionsAs || basicOpts.trackTransitionsAs || 'pageview');\n\n    return opts;\n  },\n\n  basicOpts: function(opts) {\n    if (typeof opts.updateDocumentLocationOnTransitions === 'undefined') {\n      opts.updateDocumentLocationOnTransitions = true;\n    }\n\n    return opts;\n  },\n\n  dispatcherOpts: function(opts) {\n    opts.dispatch = (opts.dispatch || DefaultHandler.factory(opts));\n    let assert = (typeof opts.dispatch === 'function');\n    Ember.assert(\"'dispatch' should be a function\", assert);\n    opts.dispatch = DefaultHandler.proxy(opts.dispatch, opts);\n\n    return opts;\n  }\n};\n\n\nfunction _assertInsightsMapping(opts) {\n  let assert = (typeof opts.insights === 'object');\n  Ember.assert(\"Can't find `insights` property inside\", assert);\n}\n\nfunction _assertTimingSettings(opts, defaultTimingSettings) {\n  opts.timing = (opts.timing || defaultTimingSettings.timing);\n  let assert = (typeof opts.timing === 'object');\n  Ember.assert(\"Can't find a properly defined `timing` settings\", assert);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/addon/runtime.js":"/* global Ember */\nimport optparse from './optparse';\nimport { ConsoleTracker, GoogleTracker } from './trackers';\n\n\nexport default function(addon) {\n  let _settings = {}; // current configuration stage\n  var runtime = {\n    configure: function() {\n      optparse.defaultConfigureOpts(arguments);\n      if (typeof arguments[0] === 'string') {\n        if (!(arguments[2] && arguments[2].append)) {\n          _settings = {};\n        }\n        let env         = arguments[0];\n        let settings    = arguments[1];\n        _settings[env]  = settings;\n\n        // apply defaults\n        optparse.basicOpts(settings);\n        optparse.trackerOpts(settings);\n\n        settings.mappings  = [];\n        addon.configs[env] = settings;\n      } else if (typeof arguments[0] === 'object') {\n        let envs = arguments[0];\n        Object.keys(envs).forEach( (envName) => {\n          this.configure(envName, envs[envName], { append: true });\n        });\n      }\n      return this;\n    },\n    track: function(mapping) {\n      mapping = optparse.defaultTrackOpts(mapping);\n\n      Object.keys(_settings).forEach( (settingsName) => {\n        let newMapping = Ember.$.extend(true, {}, mapping);\n        newMapping.insights = Ember.Object.create(newMapping.insights);\n\n        let setting = _settings[settingsName];\n        // apply defaults\n        optparse.mergeTrackerOpts(newMapping, setting);\n        optparse.dispatcherOpts(newMapping);\n        // setup tracking mapping\n        setting.mappings.push(newMapping);\n      });\n\n      return this;\n    },\n    start: function(env = 'default') {\n      addon.settings = addon.configs[env];\n      Ember.assert(\"can't find settings for '\" + env + \"' environment\", addon.settings);\n      Ember.assert(\"can't start without specified mappings\", addon.settings.mappings.length > 0);\n\n      addon.isActivated = true;\n\n      return addon.settings.tracker;\n    },\n    stop: function() {\n      addon.isActivated = false;\n    },\n\n    // Custom trackers\n    ConsoleTracker: ConsoleTracker,\n    GoogleTracker:  GoogleTracker\n\n  };\n\n  return runtime;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/addon/trackers.js":"import ConsoleTracker from './trackers/console';\nimport GoogleTracker  from './trackers/google';\n\nexport { ConsoleTracker, GoogleTracker };\n","/home/travis/build/npmtest/node-npmtest-ember-insights/node_modules/ember-insights/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n"}